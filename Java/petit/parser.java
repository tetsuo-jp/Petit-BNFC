
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 07 18:28:11 JST 2013
//----------------------------------------------------

package petit;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 07 18:28:11 JST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\002\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\005\000\002\004\005" +
    "\000\002\004\010\000\002\005\003\000\002\005\004\000" +
    "\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\024\000\010\002\uffff\011\007\014\006\001\002\000" +
    "\004\002\026\001\002\000\004\002\000\001\002\000\004" +
    "\005\024\001\002\000\010\006\013\012\016\014\014\001" +
    "\002\000\006\002\ufffe\004\011\001\002\000\010\002\uffff" +
    "\011\007\014\006\001\002\000\004\002\ufffd\001\002\000" +
    "\012\002\ufffa\004\ufffa\010\ufffa\013\ufffa\001\002\000\012" +
    "\002\ufff8\004\ufff8\010\ufff8\013\ufff8\001\002\000\004\013" +
    "\020\001\002\000\010\006\013\012\016\014\014\001\002" +
    "\000\012\002\ufff9\004\ufff9\010\ufff9\013\ufff9\001\002\000" +
    "\004\007\021\001\002\000\006\011\007\014\006\001\002" +
    "\000\004\010\023\001\002\000\010\002\ufffb\004\ufffb\010" +
    "\ufffb\001\002\000\010\006\013\012\016\014\014\001\002" +
    "\000\010\002\ufffc\004\ufffc\010\ufffc\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\024\000\010\002\003\003\004\004\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\014\001\001\000\002\001\001\000\006\003\011\004" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\024\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public petit.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (petit.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Exp ::= _IDENT_ 
            {
              petit.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new petit.Absyn.EVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Exp ::= _SYMB_6 Exp 
            {
              petit.Absyn.Exp RESULT =null;
		petit.Absyn.Exp p_2 = (petit.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new petit.Absyn.ESuc(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Exp ::= _SYMB_2 
            {
              petit.Absyn.Exp RESULT =null;
		 RESULT = new petit.Absyn.EZer(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Stm ::= _SYMB_5 Exp _SYMB_7 _SYMB_3 Stm _SYMB_4 
            {
              petit.Absyn.Stm RESULT =null;
		petit.Absyn.Exp p_2 = (petit.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		petit.Absyn.Stm p_5 = (petit.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new petit.Absyn.SFor(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Stm ::= _IDENT_ _SYMB_1 Exp 
            {
              petit.Absyn.Stm RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		petit.Absyn.Exp p_3 = (petit.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new petit.Absyn.SAss(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListStm ::= Stm _SYMB_0 ListStm 
            {
              petit.Absyn.ListStm RESULT =null;
		petit.Absyn.Stm p_1 = (petit.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		petit.Absyn.ListStm p_3 = (petit.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListStm ::= Stm 
            {
              petit.Absyn.ListStm RESULT =null;
		petit.Absyn.Stm p_1 = (petit.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new petit.Absyn.ListStm(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListStm ::= 
            {
              petit.Absyn.ListStm RESULT =null;
		 RESULT = new petit.Absyn.ListStm(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListStm 
            {
              petit.Absyn.Program RESULT =null;
		petit.Absyn.ListStm p_1 = (petit.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new petit.Absyn.PDefs(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		petit.Absyn.Program start_val = (petit.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

